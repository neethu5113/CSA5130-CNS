// Input: 128-bit zero block
// Output: Subkey1 and Subkey2 via bit shift and conditional XOR

#include <stdio.h>
#include <stdint.h>

// Constants for AES (128-bit block): Rb = 0x87
uint8_t Rb = 0x87;

void leftShift(uint8_t *in, uint8_t *out) {
    uint8_t overflow = 0;
    for (int i = 15; i >= 0; i--) {
        out[i] = (in[i] << 1) | overflow;
        overflow = (in[i] & 0x80) ? 1 : 0;
    }
}

void generateSubkeys(uint8_t *L) {
    uint8_t K1[16], K2[16];

    leftShift(L, K1);
    if (L[0] & 0x80) K1[15] ^= Rb;

    leftShift(K1, K2);
    if (K1[0] & 0x80) K2[15] ^= Rb;

    printf("Subkey 1: ");
    for (int i = 0; i < 16; i++) printf("%02X ", K1[i]);
    printf("\nSubkey 2: ");
    for (int i = 0; i < 16; i++) printf("%02X ", K2[i]);
    printf("\n");
}

int main() {
    uint8_t L[16] = {0};  // result of AES(K, 0^128)
    L[15] = 0x8A; // sample non-zero bit pattern
    generateSubkeys(L);
    return 0;
}
